<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls">

    <ControlTemplate x:Key="WindowCommandsButtonTemplate" TargetType="{x:Type Button}">
        <Grid Background="{TemplateBinding Background}">
            <Controls:ContentControlEx x:Name="PART_ContentControlEx"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Content="{TemplateBinding Content}"
                                       ContentCharacterCasing="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"
                                       ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       Opacity="0.5"
                                       RecognizesAccessKey="True"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_ContentControlEx" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="WindowCommandsToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Grid Background="{TemplateBinding Background}">
            <Controls:ContentControlEx x:Name="PART_ContentControlEx"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Content="{TemplateBinding Content}"
                                       ContentCharacterCasing="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"
                                       ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       Opacity="0.5"
                                       RecognizesAccessKey="True"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ContentControlEx" Property="Opacity" Value="0.8" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_ContentControlEx" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="WindowCommandsControlStyle" TargetType="{x:Type Control}">
        <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Foreground" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8 0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush4}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd"
                            Background="Transparent"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <Path Name="Arrow"
                                  Margin="4"
                                  VerticalAlignment="Bottom"
                                  Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"
                                  Fill="Black" />
                            <ContentPresenter />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush2}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush2}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush2}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource GrayBrush4}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="LightWindowCommandsTemplate" TargetType="Controls:WindowCommands">
        <DockPanel>
            <ToggleButton x:Name="PART_ToggleButton"
                          ClickMode="Press"
                          DockPanel.Dock="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(DockPanel.Dock), Mode=OneWay}"
                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          IsEnabled="false"
                          Style="{StaticResource ToolBarOverflowButtonStyle}"
                          Visibility="Collapsed">
                <Popup x:Name="OverflowPopup"
                       AllowsTransparency="true"
                       Focusable="false"
                       IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="Slide"
                       StaysOpen="false">
                    <Grid x:Name="DropDownBorder" Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=Background, Mode=OneWay}">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=WindowTitleBrush, Mode=OneWay}"
                                              FocusVisualStyle="{x:Null}"
                                              Focusable="true"
                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                              KeyboardNavigation.TabNavigation="Cycle" />
                    </Grid>
                </Popup>
            </ToggleButton>
            <ToolBarPanel x:Name="PART_ToolBarPanel"
                          Margin="0"
                          Background="{TemplateBinding Background}"
                          IsItemsHost="true" />
        </DockPanel>

        <ControlTemplate.Triggers>
            <Trigger Property="HasOverflowItems" Value="true">
                <Setter TargetName="PART_ToggleButton" Property="IsEnabled" Value="true" />
                <Setter TargetName="PART_ToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>

        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style BasedOn="{StaticResource WindowCommandsControlStyle}" TargetType="{x:Type Button}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
                </Style>
                <Style BasedOn="{StaticResource WindowCommandsControlStyle}" TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
                </Style>

                <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
                       BasedOn="{StaticResource WindowCommandsControlStyle}"
                       TargetType="{x:Type Button}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
                </Style>
                <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
                       BasedOn="{StaticResource WindowCommandsControlStyle}"
                       TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
                </Style>
            </ResourceDictionary>
        </ControlTemplate.Resources>
    </ControlTemplate>

    <ControlTemplate x:Key="DarkWindowCommandsTemplate" TargetType="Controls:WindowCommands">
        <DockPanel>
            <ToggleButton x:Name="PART_ToggleButton"
                          ClickMode="Press"
                          DockPanel.Dock="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(DockPanel.Dock), Mode=OneWay}"
                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          IsEnabled="false"
                          Style="{StaticResource ToolBarOverflowButtonStyle}"
                          Visibility="Collapsed">
                <Popup x:Name="OverflowPopup"
                       AllowsTransparency="true"
                       Focusable="false"
                       IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="Slide"
                       StaysOpen="false">
                    <Grid x:Name="DropDownBorder" Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=Background, Mode=OneWay}">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=WindowTitleBrush, Mode=OneWay}"
                                              FocusVisualStyle="{x:Null}"
                                              Focusable="true"
                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                              KeyboardNavigation.TabNavigation="Cycle" />
                    </Grid>
                </Popup>
            </ToggleButton>
            <ToolBarPanel x:Name="PART_ToolBarPanel"
                          Margin="0"
                          Background="{TemplateBinding Background}"
                          IsItemsHost="true" />
        </DockPanel>

        <ControlTemplate.Triggers>
            <Trigger Property="HasOverflowItems" Value="true">
                <Setter TargetName="PART_ToggleButton" Property="IsEnabled" Value="true" />
                <Setter TargetName="PART_ToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>

        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style BasedOn="{StaticResource WindowCommandsControlStyle}" TargetType="{x:Type Button}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style BasedOn="{StaticResource WindowCommandsControlStyle}" TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
                       BasedOn="{StaticResource WindowCommandsControlStyle}"
                       TargetType="{x:Type Button}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
                       BasedOn="{StaticResource WindowCommandsControlStyle}"
                       TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ResourceDictionary>
        </ControlTemplate.Resources>
    </ControlTemplate>

    <Style x:Key="MahApps.Metro.Styles.WindowCommandsItem" TargetType="{x:Type Controls:WindowCommandsItem}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinHeight" Value="{Binding ParentWindow.TitleBarHeight, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
        <Setter Property="Padding" Value="1 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:WindowCommandsItem}">
                    <StackPanel HorizontalAlignment="{Binding HorizontalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
                                VerticalAlignment="{Binding VerticalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
                                Orientation="Horizontal">
                        <ContentPresenter x:Name="PART_ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Rectangle x:Name="PART_Separator"
                                   Width="1"
                                   Height="{Binding SeparatorHeight, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
                                   Fill="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
                                   IsHitTestVisible="False"
                                   Opacity="0.25"
                                   SnapsToDevicePixels="True"
                                   UseLayoutRounding="True" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSeparatorVisible" Value="False">
                            <Setter TargetName="PART_Separator" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MahApps.Metro.Styles.WindowCommands" TargetType="{x:Type Controls:WindowCommands}">
        <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="DarkTemplate" Value="{StaticResource DarkWindowCommandsTemplate}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="LightTemplate" Value="{StaticResource LightWindowCommandsTemplate}" />
        <Setter Property="Template" Value="{StaticResource LightWindowCommandsTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ParentWindow.ShowTitleBar, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
